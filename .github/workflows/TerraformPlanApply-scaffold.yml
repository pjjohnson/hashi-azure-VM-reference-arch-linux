name: '0.0 - Terraform PlanApply Scaffolding'

on:
  workflow_dispatch:
    inputs:
      PlanApply:
        description: 'Set to 0 to only run plan; set to 1 to run plan & apply'
        required: true
        default: '1'
  # push:
  #   branches: [ '*' ]
  # pull_request:
  #   branches: [ master ]


env:
  # Per https://developer.hashicorp.com/terraform/cli/config/environment-variables
  TF_WORKSPACE: 'vm-ref-arch-scaffold'
  #varfile: 'dev.terraform.tfvars'
  TF_IN_AUTOMATION: 1  # Tell terraform this is CI; purely cosmetic change to Terraform's human-readable output
  TF_INPUT: 0    # don't prompt for missing inputs
  #



jobs:
  Plan:
    name: 'Plan'
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # - uses: azure/login@v1
    #   name: Azure Login
    #   with:
    #     creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    # Install the Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2.0.3
      with:
        terraform_version: 1.3.6
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
        terraform_wrapper: false

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc. 
    - name: Terraform Init
      run: terraform -chdir=scaffolding init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform -chdir=scaffolding fmt -check -diff

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform -chdir=scaffolding plan 
      env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

  Apply:
    name: 'Apply'
    runs-on: ubuntu-latest
    needs: 'Plan'
    # Run Apply if this is a workflow_dispatch (manual) run with the PlanApply input set to 1
    if:   ( github.event_name == 'workflow_dispatch' && github.event.inputs.PlanApply == '1' )
    defaults:
      run:
        shell: bash
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2.0.3
      with:
        terraform_version: 1.3.6
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
        terraform_wrapper: false  # need this false so that stdout is not wrapped for showurl step
    - name: Terraform Init
      run: terraform -chdir=scaffolding init
    - name: Terraform Apply
      run: terraform -chdir=scaffolding apply  -auto-approve 
      env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

    

       